Implement the following using C/C++ or equivalent with Linux / Windows environment

Part A

1.	Using TCP/IP Socket programming, implement a program to transfer the contents of a requested file from server to the client using TCP/IP Sockets
 
/*Client.c */

#include<sys/types.h>
#include<stdlib.h>
#include<netinet/in.h>
#include<sys/socket.h>
#include<sys/stat.h>
#include<unistd.h>
#include<stdio.h>
#include<fcntl.h>
int main(int argc,char* argv[])
{
int create_socket,count;
int bufsize=1024;
char *buffer=malloc(bufsize);
char fname[256];
struct sockaddr_in address;
if((create_socket=socket(AF_INET,SOCK_STREAM,0))>0)
printf("The Socket was created\n");
address.sin_family=AF_INET;
address.sin_port=htons(15000);
inet_pton(AF_INET,argv[1],& address.sin_addr);
if(connect(create_socket,(struct sockaddr *)&address,sizeof(address))==0)
printf("The Connection was accepted with  the server%s.............\n",argv[1]);
printf("Enter the filename to request");
scanf("%s",fname);
send(create_socket,fname,sizeof(fname),0);
printf("Request Accepted..........receiving fle\n");
printf("The Content of file are\n");
while((count=recv(create_socket,buffer,b  ufsize,0))>0)
{
write(1,buffer,count);
}
printf("\n EOF \n");
return close(create_socket);
}
/* SERVER.C */
#include<stdlib.h>
#include<netinet/in.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<sys/stat.h>
#include<unistd.h>
#include<stdio.h>
#include<fcntl.h>
int main()
{
    int count,create_socket,new_socket,addrlen;
    int fd;
    int bufsize=1024;
    char *buffer=malloc(bufsize);
    char fname[256];
    struct sockaddr_in address;
    if((create_socket=socket(AF_INET,SOCK_STREAM,0))>0)
    printf("The Socket was created");
   address.sin_family=AF_INET;
   address.sin_addr.s_addr=INADDR_ANY;
   address.sin_port=htons(15000);
   if(bind(create_socket,(struct sockaddr *)& 
   address,sizeof(address))==0)
   printf("Binding socket\n");
   listen(create_socket,3);
   addrlen=sizeof(struct sockaddr_in *);
   new_socket=accept(create_socket,(struct sockaddr *)& address,&addrlen);
   if(new_socket>0)
   printf("The Client%s is connected\n",inet_ntoa(address.sin_addr));
   recv(new_socket,fname,255,0);
   printf("The Request for filename %s received\n",fname);
   if((fd=open(fname,O_RDONLY))<0)
 {
perror("file open failure\n");
exit(0);
}
 while((count=read(fd,buffer,bufsize))>0)
{
send(new_socket,buffer,count,0);
}
printf("Request completed\n");
close(new_socket);
return close(create_socket);
}
2.	Implement the data link layer farming methods such as character stuffing and bit stuffing
//Character stuffing

#include<stdio.h> 
#include<string.h> 
void main() 
{ 
int i=0,j=0,n; 
char a[30],b[30]; 
printf("enter the original string\n"); 
scanf("%s",&a); 
n=strlen(a); 
b[0]='d'; 
b[1]='l'; 
b[2]='e'; 
b[3]='s'; 
b[4]='t'; 
b[5]='x'; 
j=6; 
while(i<n) 
{ 
if(a[i]=='d' && a[i+1]=='l' && a[i+2]=='e') 
{ 
b[j]='d'; 
b[j+1]='l'; 
b[j+2]='e'; 
j=j+3; 
} 
b[j]=a[i]; 
i++; 
j++; 
} 
b[j]='d'; 
b[j+1]='l'; 
b[j+2]='e'; 
b[j+3]='e'; 
b[j+4]='t'; 
b[j+5]='x'; 
b[j+6]='\0'; 
printf("\n after character stuffing:\n"); 
printf("%s",b); 
} 
//Bit stuffing
#include<stdio.h> 
void main() 
{ 
int i=0,count=0; 
char a[100]; 
printf("enter the frame:"); 
scanf("%s",a); 
printf("\n after bit stuffing\n"); 
printf("01111110"); 
for(i=0;a[i];i++) 
{ 
if(a[i]=='1') 
count++; 
else 
count=0; 
printf("%c",a[i]); 
if(count==5) 
{ 
printf("0"); 
count=0; 
} 
} 
printf("01111110"); 
}
















3.	Implement on a data set of characters the three CRC polynomials- CRC 12, CRC 16 and CRC CCIP

#include<stdio.h>
#include<string.h>

 int xor2_div(char *inframe,char *opframe,int mode)	
{
 int i,j;
char gen[81]={"1011"};
strcpy(opframe,inframe);
if(mode==1)	
	{	
strcat(opframe,"000");
}
for(i=0;i<strlen(inframe);i++)
{	
if(opframe[i]=='1')
for(j=0;j<strlen(gen);j++)	
{
if((opframe[i+j]=='0')  &&  (gen[j]=='0')  ||  (opframe[i+j]=='1')  &&  (gen[j]=='1')) 
		opframe[i+j]='0';
else
		opframe[i+j]='1';
}
}
printf("\n Checksum is= %s",opframe);
for(i=0;i<strlen(opframe);i++)
if (opframe[i]=='1')  
		return(1);
return(0);
}
int main()	
{
char inframe[81]={ '\0' },opframe[81]={ '\0' },rframe[81]={ '\0' };
int err;
system("clear");
printf("\nEnter input frame in BINARY: ");
scanf("%s",inframe);
err=xor2_div(inframe,opframe,1);
printf("\n CCITT-CRC is %s %s \n",inframe,opframe+strlen(inframe));
printf("\n Enter Received code in BINARY:");
scanf("%s",rframe);
if(!xor2_div(rframe,opframe,0))
{
printf("\nReceived CCITT is Errorfree:\n”); 
printf("\n  Original frame:%s\n",inframe);
		}
else
	printf("\nReceived CCITT Erroneous??\n");
return (0);
}






























4.	Write a program for frame sorting techniques used in buffers

#include<stdio.h>
struct frame
{
int num;
char str[20];
};
struct frame arr[10];
int n;

void sort() /*Bubble sort */
{
int i,j;
struct frame temp;
for(i=0;i<n-1;i++)
for(j=0;j<n-i-1;j++)
if(arr[j].num>arr[j+1].num)
{ temp=arr[j];
arr[j]=arr[j+1];
arr[j+1]=temp;
}
}
int main()
{
int i;
system("clear");
printf("Enter the number of frames\n");
scanf("%d",&n);
printf("Enter the frame sequence number and frame contents\n");
for(i=0;i<n;i++)
scanf("%d%s",&arr[i].num,&arr[i].str);
sort();
printf("The frame in sequences\n");
for(i=0;i<n;i++)
printf("%d\t%s\n",arr[i].num,arr[i].str);
}

































5.	Write a program for Hamming code generation for error detection and correction.
    #include<stdio.h>
 
    void main() 
   {
    int data[10];
    int dataRecived[10],c,c1,c2,c3,i;
    printf("Enter 4 bits of data one by one\n");
    scanf("%d",&data[0]);
    scanf("%d",&data[1]);
    scanf("%d",&data[2]);
    scanf("%d",&data[3]);
   data[6]=data[0]^data[2]^data[3];
   data[5]=data[0]^data[1]^data[3];
   data[4]=data[0]^data[1]^data[2];
   printf("\nEncoded data is\n");
   for(i=0;i<7;i++)
   printf("%d",data[i]);
   printf("\n Enter received data bits one by one\n");
   for(i=0;i<7;i++)
   scanf("%d",&dataRecived [i]);
   c1= dataRecived [6]^ dataRecived [3]^ dataRecived [2]^ dataRecived [0];
   c2= dataRecived [5]^ dataRecived [3]^ dataRecived [1]^ dataRecived [0];
   c3= dataRecived [4]^ dataRecived [2]^ dataRecived [1]^ dataRecived [0];
   c=c3*3+c2*2+c1 ;
    if(c==0) 
   {
    printf("\n No error while transmission of data\n");
    }
   else 
   {
  printf("\nError on position %d",c+1);
  printf("\nData sent : ");
  for(i=0;i<7;i++)
  printf("%d",data[i]);
  printf("\n Data received : ");
  for(i=0;i<7;i++)
  printf("%d", dataRecived [i]);
  printf("\nCorrect message is\n");
 //if errorneous bit is 0 we complement it else vice versa
if(dataRecived [7-c]==0)
dataRecived [7-c]=1;
   else
   dataRecived [7-c]=0;
   for (i=0;i<7;i++) 
  {
   printf("%d", dataRecived [i]);
   }
  }
}












6.	Take an example subnet graph with weights indicating delay between nodes. Now obtain routing table at each  node using distance vector routing algorithm
#include<stdio.h>
#define MAX 10
#define INFINITY 9999
int dvert();
int main()
{
dvert();
}
int dvert()
{
struct rtable
{
unsigned distance[MAX];
unsigned from[MAX];
} rt[10];
int dmatrix[MAX][MAX];
int n=0,i=0,j=0,k=0,count=0;
printf("Enter no of nodes");
scanf("%d",&n);
printf("Enter the list matrix value\n");
for(i=0;i<n;i++)
for(j=0;j<n;j++)
{
scanf("%d",&dmatrix[i][j]);
dmatrix[j][i]=dmatrix[i][j];
if(i==j)
dmatrix[i][j]=0;
}
printf("Distance vector matrix is\n");
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
printf("%d\n",dmatrix[i][j]);
}
for(i=0;i<n;i++)
for(j=0;j<n;j++)
rt[i].distance[j]=rt[i].from[j]=INFINITY;
for(i=0;i<n;i++)
for(j=0;j<n;j++)
{
rt[i].distance[j]=dmatrix[i][j];
rt[i].from[j]=j;
}
do
{
count=0;
for(i=0;i<n;i++)
for(j=0;j<n;j++)
for(k=0;k<n;k++)
if(rt[i].distance[j]>dmatrix[i][k]+rt[k].distance[j])
{
rt[i].distance[j]=rt[i].distance[k]+rt[k].distance[j];
rt[i].from[j]=j;
count++;
}
}
while(count!=0);
for(i=0;i<n;i++)
{
printf("static value of router no %d\n",i);
for(j=0;j<n;j++)
{
printf("from %d to %d distance is %d\n",rt[i].from[i],rt[i].from[j],rt[i].distance[j]);
}
}
return 0;
}



























7.	Using Leaky Bucket algorithm, design a program to achieve traffic management at flow level by implementing Closed Loop Control technique.
#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/wait.h>
#define MAX 100
int buf[MAX];
int main()
{
   int i=0,j,k,bsize,psize=0; 
   printf("enter the bucket size");
do
{
        scanf("%d",&bsize);
}
while(bsize>MAX);
for(;;)
{
if(bsize==psize)
{
printf("bucket is full\n");
break;
}
else
{
   printf("enter the packet size\n");
   scanf("%d",&buf[i]);
   if(buf[i]>(bsize-psize))
  {
    printf("packet exceeds\n");
    break;
   }
psize=psize+buf[i];
i++;
}
       }
k=i;
for(i=0;i<k;i++)
{
  printf("%d packets is %d\n",i+1,buf[i]);
  for(j=0;j<buf[i];j++)
 {
printf(".");
  }
}
}
















8.	Using RSA algorithm, encrypt a text data and decrypt the same.
#include<stdio.h>
int z,n,m,e,d,c,flag;
void check()
{
int i;
for(i=3;e%i==0 && z%i==0;i++)
{
flag=1;
}
flag=0;
}
void encrytpt()
{
int i;
c=1;
for(i=0;i<e;i++)
c=c*m%n;
c=c%n;
printf(“Encrypted keyword:%d”,c);
}
void decrypt()
{
int i;
m=1;
for(i=0;i<d;i++)
m=m*c%n;
m=m%n;
printf(“Decrypted  keyword:%d”,m);
}
void main()
{
	int p,q,s;
	printf(“Enter two relatively prime  numbers”);
	scanf(“%d%d”,&p,&q);
	n=p*q;
	z=(p-1)(q-1);
	printf(“value of z=%d”,z);
	printf(“Enter the value of e”);
	scanf(“%d”,&e);
	check();
	while(flag==1)
	d=1;
	do
	{	
	s=(d*e)%z;
	d++;
	}
	while(s!=1);
	d=d-1;
printf(“Public key:{%d,%d}”,e,n);
	printf(“Private key:{%d,%d}”,d,z);
	printf(“Enter the plain text”);
	scanf(“%d”,&m);
	encrypt();
	printf(“Enter the cipher text”);
	scanf(“%d”,&c);
	decrypt();	}
Simulation Programs using any network simulator or any other equivalent software
Part B
1.	Simulate a three nodes point-to-point network with duplex links between them. set the queue size and vary bandwidth and find the number of packets drop.

# Save the file with .tcl extension

set f [open out.tr w]
$ns trace-all $f
set nf [open out.nam w]
$ns namtrace-all $nf
$ns duplex-link $n0 $n1 1Mb 2ms DropTail
$ns duplex-link $n1 $n2 1Mb 2ms DropTail
$ns duplex-link-op $n0 $n1 orient right
$ns duplex-link-op $n1 $n2 orient right
$ns duplex-link-op $n1 $n2 queuePos 0.5
$ns queue-limit $n0 $n1 10
set udp0 [new Agent/UDP]
$ns attach-agent $n0 $udp0
set cbr0 [new Application/Traffic/CBR]
$cbr0 attach-agent $udp0
set null0 [new Agent/Null]
$ns attach-agent $n2 $null0
set null1 [new Agent/Null]
$ns attach-agent $n1 $null1
$ns connect $udp0 $null0
$ns at 1.0 "$cbr0 start"
puts [$cbr0 set packetSize_]
puts [$cbr0 set interval_]
$ns at 3.0 "finish"
proc finish {} {
	global ns f nf
	$ns flush-trace
	close $f
	close $nf
	puts "running nam..."
	exec nam out.nam &
	exit 0
}
$ns run




























2.	Simulate a four node point-to-point network with the links connected as follows:
n0-n2 ,n1-n2 and n2-n3. Apply TCP agent changing the parameter and determine the number of packets sent / received by TCP/UDP.

set ns [new Simulator]
$ns color 0 blue
$ns color 1 red
$ns color 2 white
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]
set f [open out.tr w]
$ns trace-all $f
set nf [open out.nam w]
$ns namtrace-all $nf
$ns duplex-link $n0 $n2 5Mb 2ms DropTail
$ns duplex-link $n1 $n2 5Mb 2ms DropTail
$ns duplex-link $n2 $n3 1.5Mb 10ms DropTail
$ns duplex-link-op $n0 $n2 orient right-up
$ns duplex-link-op $n1 $n2 orient right-down
$ns duplex-link-op $n2 $n3 orient right
$ns duplex-link-op $n2 $n3 queuePos 0.5
set udp0 [new Agent/UDP]
$ns attach-agent $n0 $udp0
set cbr0 [new Application/Traffic/CBR]
$cbr0 attach-agent $udp0
set udp1 [new Agent/UDP]
$ns attach-agent $n3 $udp1
$udp1 set class_ 1
set cbr1 [new Application/Traffic/CBR]
$cbr1 attach-agent $udp1
set null0 [new Agent/Null]
$ns attach-agent $n3 $null0
set null1 [new Agent/Null]
$ns attach-agent $n1 $null1
$ns connect $udp0 $null0
$ns connect $udp1 $null1
$ns at 1.0 "$cbr0 start"
$ns at 1.1 "$cbr1 start"
set tcp [new Agent/TCP]
$tcp set class_ 2
set sink [new Agent/TCPSink]
$ns attach-agent $n0 $tcp
$ns attach-agent $n3 $sink
$ns connect $tcp $sink
set ftp [new Application/FTP]
$ftp attach-agent $tcp
$ns at 1.2 "$ftp start"
$ns at 1.35 "$ns detach-agent $n0 $tcp ; $ns detach-agent $n3 $sink"
puts [$cbr0 set packetSize_]
puts [$cbr0 set interval_]
$ns at 3.0 "finish"
proc finish {} {
	global ns f nf
	$ns flush-trace
	close $f
	close $nf
	puts "running nam..."
	exec nam out.nam &
	exit 0
}
$ns run

